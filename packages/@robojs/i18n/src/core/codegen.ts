import { i18nLogger } from './loggers.js'
import { DOT_TOKEN, sanitizeDottedArgs } from './utils.js'
import {
	parse,
	isPluralElement,
	isSelectElement,
	isArgumentElement,
	isNumberElement,
	isDateElement,
	isTimeElement,
	MessageFormatElement
} from '@formatjs/icu-messageformat-parser'
import type { Node, TsKind } from './types.js'

export function generateTypes(
	locales: string[],
	keys: string[],
	localeValues: Record<string, Record<string, string>>
): string {
	const paramsByKey: Record<string, Node> = {}

	function addPath(key: string, dotted: string, kind: TsKind) {
		const root = (paramsByKey[key] ||= {})
		const parts = dotted.split('.')
		let node = root

		for (let i = 0; i < parts.length; i++) {
			const part = parts[i]!
			node.children ||= {}
			node = node.children[part] ||= {}

			if (i === parts.length - 1) {
				node.kind = widen(node.kind, kind)
			}
		}
	}

	const visit = (els: MessageFormatElement[], key: string) => {
		for (const el of els) {
			if (isPluralElement(el)) {
				addPath(key, undot(el.value), 'number')
				for (const opt of Object.values(el.options)) visit(opt.value, key)
			} else if (isSelectElement(el)) {
				addPath(key, undot(el.value), 'string')
				for (const opt of Object.values(el.options)) visit(opt.value, key)
			} else if (isNumberElement(el)) {
				addPath(key, undot(el.value), 'number')
			} else if (isDateElement(el) || isTimeElement(el)) {
				addPath(key, undot(el.value), 'dateOrNumber')
			} else if (isArgumentElement(el)) {
				addPath(key, undot(el.value), 'string')
			} else {
				// @ts-expect-error defensive traversal
				if (Array.isArray(el.value)) visit(el.value, key)
			}
		}
	}

	for (const locale of Object.keys(localeValues)) {
		const map = localeValues[locale]
		for (const key of Object.keys(map)) {
			try {
				const msg = sanitizeDottedArgs(map[key])
				const ast = parse(msg, { captureLocation: false })
				visit(ast, key)
			} catch (err) {
				// If a message fails to parse, fall back to no params for that key in this locale
				i18nLogger.warn?.(`Failed to parse ICU for key "${key}" in locale "${locale}": ${String(err)}`)
			}
		}
	}

	// Compose the .d.ts content
	let buffer = `// @generated by @robojs/i18n (robo.js)\n`
	buffer += '// DO NOT EDIT — generated from /locales/**/*.json. Run `robo build` to update.\n\n'
	buffer += `export type Locale = ${locales.map((locale) => `'${locale}'`).join(' | ')}\n\n`
	buffer += `export type LocaleKey = ${keys.map((key) => `'${key}'`).join(' | ')}\n\n`
	buffer += `export type LocaleParamsMap = {\n`

	for (const key of keys) {
		const root = paramsByKey[key]
		if (!root) {
			buffer += `  '${key}': {},\n`
			continue
		}
		buffer += `  '${key}': ${emitNode(root, 2)},\n`
	}
	buffer += `}\n\n`
	buffer += `export type ParamsFor<K extends LocaleKey> = LocaleParamsMap[K]\n\n`

	return buffer
}

const tsFor = (k: TsKind): string => (k === 'number' ? 'number' : k === 'dateOrNumber' ? 'Date | number' : 'string')

const safeIdent = (s: string) => (/^[A-Za-z_$][A-Za-z0-9_$]*$/.test(s) ? s : JSON.stringify(s))

const undot = (s: string) => s.replaceAll(DOT_TOKEN, '.')

const widen = (a: TsKind | undefined, b: TsKind): TsKind => {
	if (!a) return b
	if (a === b) return a
	// date/time vs number → dateOrNumber
	if (a === 'dateOrNumber' || b === 'dateOrNumber') return 'dateOrNumber'
	// string vs number → string (most permissive & still safe for formatting)
	return 'string'
}

function emitNode(node: Node, indent = 2): string {
	const hasChildren = !!node.children && Object.keys(node.children).length > 0

	if (!hasChildren) {
		// leaf only (scalar or unknown) – default to string if no kind recorded
		return tsFor(node.kind ?? 'string')
	}

	// build object type from children
	let objectFields = ''
	for (const [k, child] of Object.entries(node.children!)) {
		objectFields += `${' '.repeat(indent + 2)}${safeIdent(k)}?: ${emitNode(child, indent + 2)}\n`
	}
	const obj = `{\n${objectFields}${' '.repeat(indent)}}`

	// If this node was also used as a scalar (e.g., {user}) AND has children (e.g., {user.name}),
	// produce a union: scalar | { ... }
	if (node.kind) {
		return `${tsFor(node.kind)} | ${obj}`
	}
	return obj
}
